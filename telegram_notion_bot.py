import os
import logging
import time
import asyncio
from datetime import datetime
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request
import threading

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
NOTION_TOKEN = os.environ.get('NOTION_TOKEN')
DATABASE_ID = os.environ.get('DATABASE_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class NotionAPI:
    def __init__(self, token):
        self.token = token
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
    
    def create_task(self, title, notes="", source="Telegram", category="–õ–∏—á–Ω–æ–µ", database_id=None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π database_id –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
        db_id = database_id or DATABASE_ID
        if not db_id:
            logger.error("DATABASE_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
            return None
            
        url = "https://api.notion.com/v1/pages"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã
        
        data = {
            "parent": {"database_id": db_id},
            "properties": {
                "–ó–∞–¥–∞—á–∞": {
                    "title": [{"text": {"content": title}}]
                },
                "–ó–∞–º–µ—Ç–∫–∏": {
                    "rich_text": [{"text": {"content": notes}}]
                },
                "–ò—Å—Ç–æ—á–Ω–∏–∫": {
                    "select": {"name": source}
                },
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {
                    "select": {"name": category}
                },
                "–î–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è": {"checkbox": True},
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ": {"checkbox": False}
            }
        }
        
        try:
            response = requests.post(url, headers=self.headers, json=data, timeout=10)
            response.raise_for_status()
            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {title}")
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ Notion API: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
notion = NotionAPI(NOTION_TOKEN) if NOTION_TOKEN else None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è Notion Inbox –∑–∞–ø—É—â–µ–Ω!\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ –û–±—ã—á–Ω–æ: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: #—Ä–∞–±–æ—Ç–∞ –°–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ –° –∑–∞–º–µ—Ç–∫–∞–º–∏: –í—Å—Ç—Ä–µ—á–∞ | –í –æ—Ñ–∏—Å–µ –≤ 15:00\n\n"
        "üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "#–ª–∏—á–Ω–æ–µ #–¥–æ–º #—Ä–∞–±–æ—Ç–∞ #–∑–¥–æ—Ä–æ–≤—å–µ #—Ñ–∏–Ω–∞–Ω—Å—ã #—Å–µ–º—å—è"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        category = "–õ–∏—á–Ω–æ–µ"
        title = text
        notes = f"–ò–∑ Telegram: {user_name}"
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_map = {
            "#–ª–∏—á–Ω–æ–µ": "–õ–∏—á–Ω–æ–µ", "#–¥–æ–º": "–î–æ–º", "#—Ä–∞–±–æ—Ç–∞": "–†–∞–±–æ—Ç–∞",
            "#–∑–¥–æ—Ä–æ–≤—å–µ": "–ó–¥–æ—Ä–æ–≤—å–µ", "#—Ñ–∏–Ω–∞–Ω—Å—ã": "–§–∏–Ω–∞–Ω—Å—ã", "#—Å–µ–º—å—è": "–°–µ–º—å—è"
        }
        
        for tag, cat in category_map.items():
            if text.lower().startswith(tag):
                category = cat
                title = text[len(tag):].strip()
                break
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–µ—Ç–æ–∫ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |)
        if "|" in title:
            parts = title.split("|", 1)
            title = parts[0].strip()
            notes += f" | {parts[1].strip()}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("‚è≥ –î–æ–±–∞–≤–ª—è—é –∑–∞–¥–∞—á—É...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion
        if notion and DATABASE_ID:
            result = notion.create_task(
                title=title, 
                notes=notes, 
                category=category,
                source="Telegram",
                database_id=DATABASE_ID
            )
        else:
            result = None
        
        if result:
            await processing_msg.edit_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Inbox!\n\n"
                f"üìù **–ó–∞–¥–∞—á–∞:** {title}\n"
                f"üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n"
                f"üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check –∏ webhook
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è application
application = None

@app.route('/')
def health_check():
    return {"status": "ok", "service": "telegram-notion-bot"}

@app.route('/health')
def health():
    return {"status": "healthy"}

@app.route('/webhook', methods=['POST'])
def webhook():
    if application:
        update = Update.de_json(request.get_json(), application.bot)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        asyncio.run(application.process_update(update))
    return 'OK'

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application

    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not NOTION_TOKEN:
        logger.error("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    if not DATABASE_ID:
        logger.error("DATABASE_ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        RENDER_URL = os.environ.get('RENDER_EXTERNAL_URL')
        if RENDER_URL:
            webhook_url = f"{RENDER_URL}/webhook"
            application.bot.set_webhook(url=webhook_url)
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error("RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        logger.info("üöÄ –ë–æ—Ç –∏ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ Render")

        # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            time.sleep(60)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
