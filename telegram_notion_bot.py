import os
import logging
from datetime import datetime
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
NOTION_TOKEN = os.environ.get('NOTION_TOKEN')
DATABASE_ID = os.environ.get('DATABASE_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

class NotionAPI:
    def __init__(self, token):
        self.token = token
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
    
    def create_task(self, title, notes="", source="Telegram", category="–õ–∏—á–Ω–æ–µ"):
        url = "https://api.notion.com/v1/pages"
        
        data = {
            "parent": {"database_id": DATABASE_ID},
            "properties": {
                "–ó–∞–¥–∞—á–∞": {
                    "title": [{"text": {"content": title}}]
                },
                "–ó–∞–º–µ—Ç–∫–∏": {
                    "rich_text": [{"text": {"content": notes}}]
                },
                "–ò—Å—Ç–æ—á–Ω–∏–∫": {
                    "select": {"name": source}
                },
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {
                    "select": {"name": category}
                },
                "–î–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è": {"checkbox": True},
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ": {"checkbox": False}
            }
        }
        
        try:
            response = requests.post(url, headers=self.headers, json=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Notion API: {e}")
            return None

notion = NotionAPI(NOTION_TOKEN)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è Notion Inbox –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ –û–±—ã—á–Ω–æ: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: #—Ä–∞–±–æ—Ç–∞ –°–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ –° –∑–∞–º–µ—Ç–∫–∞–º–∏: –í—Å—Ç—Ä–µ—á–∞ | –í –æ—Ñ–∏—Å–µ –≤ 15:00"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    category = "–õ–∏—á–Ω–æ–µ"
    title = text
    notes = f"–ò–∑ Telegram: {user_name}"
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_map = {
        "#–ª–∏—á–Ω–æ–µ": "–õ–∏—á–Ω–æ–µ", "#–¥–æ–º": "–î–æ–º", "#—Ä–∞–±–æ—Ç–∞": "–†–∞–±–æ—Ç–∞",
        "#–∑–¥–æ—Ä–æ–≤—å–µ": "–ó–¥–æ—Ä–æ–≤—å–µ", "#—Ñ–∏–Ω–∞–Ω—Å—ã": "–§–∏–Ω–∞–Ω—Å—ã", "#—Å–µ–º—å—è": "–°–µ–º—å—è"
    }
    
    for tag, cat in category_map.items():
        if text.lower().startswith(tag):
            category = cat
            title = text[len(tag):].strip()
            break
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–µ—Ç–æ–∫
    if "|" in title:
        parts = title.split("|", 1)
        title = parts[0].strip()
        notes += f" | {parts[1].strip()}"
    
    result = notion.create_task(title=title, notes=notes, category=category)
    
    if result:
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Inbox!\nüìù {title}\nüè∑Ô∏è {category}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–ª—è Render –Ω—É–∂–µ–Ω polling, –Ω–µ webhook
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
